/* tslint:disable */
/* eslint-disable */
/**
 * ZMDS API documentation
 * API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerDetailsResponse,
    CustomerDetailsResponseFromJSON,
    CustomerDetailsResponseToJSON,
    CustomerPartialRequest,
    CustomerPartialRequestFromJSON,
    CustomerPartialRequestToJSON,
    CustomersRequest,
    CustomersRequestFromJSON,
    CustomersRequestToJSON,
    CustomersResponse,
    CustomersResponseFromJSON,
    CustomersResponseToJSON,
} from '../models';

export interface GetCustomerDetailsRequest {
    id: string;
}

export interface GetCustomersRequest {
    customersRequest: CustomersRequest;
}

export interface UpdateCustomerRequest {
    id: string;
    customerPartialRequest: CustomerPartialRequest;
}

/**
 * CustomerApi - interface
 * 
 * @export
 * @interface CustomerApiInterface
 */
export interface CustomerApiInterface {
    /**
     * 
     * @summary Customer details
     * @param {string} id Customer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomerDetailsRaw(requestParameters: GetCustomerDetailsRequest): Promise<runtime.ApiResponse<CustomerDetailsResponse>>;

    /**
     * Customer details
     */
    getCustomerDetails(requestParameters: GetCustomerDetailsRequest): Promise<CustomerDetailsResponse>;

    /**
     * 
     * @summary Customers list
     * @param {CustomersRequest} customersRequest Get customers request parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    getCustomersRaw(requestParameters: GetCustomersRequest): Promise<runtime.ApiResponse<CustomersResponse>>;

    /**
     * Customers list
     */
    getCustomers(requestParameters: GetCustomersRequest): Promise<CustomersResponse>;

    /**
     * 
     * @summary Customer details update
     * @param {string} id Customer ID
     * @param {CustomerPartialRequest} customerPartialRequest Updated customer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiInterface
     */
    updateCustomerRaw(requestParameters: UpdateCustomerRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Customer details update
     */
    updateCustomer(requestParameters: UpdateCustomerRequest): Promise<void>;

}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI implements CustomerApiInterface {

    /**
     * Customer details
     */
    async getCustomerDetailsRaw(requestParameters: GetCustomerDetailsRequest): Promise<runtime.ApiResponse<CustomerDetailsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomerDetails.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Customer details
     */
    async getCustomerDetails(requestParameters: GetCustomerDetailsRequest): Promise<CustomerDetailsResponse> {
        const response = await this.getCustomerDetailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Customers list
     */
    async getCustomersRaw(requestParameters: GetCustomersRequest): Promise<runtime.ApiResponse<CustomersResponse>> {
        if (requestParameters.customersRequest === null || requestParameters.customersRequest === undefined) {
            throw new runtime.RequiredError('customersRequest','Required parameter requestParameters.customersRequest was null or undefined when calling getCustomers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomersRequestToJSON(requestParameters.customersRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomersResponseFromJSON(jsonValue));
    }

    /**
     * Customers list
     */
    async getCustomers(requestParameters: GetCustomersRequest): Promise<CustomersResponse> {
        const response = await this.getCustomersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Customer details update
     */
    async updateCustomerRaw(requestParameters: UpdateCustomerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomer.');
        }

        if (requestParameters.customerPartialRequest === null || requestParameters.customerPartialRequest === undefined) {
            throw new runtime.RequiredError('customerPartialRequest','Required parameter requestParameters.customerPartialRequest was null or undefined when calling updateCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/customer-lookups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerPartialRequestToJSON(requestParameters.customerPartialRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Customer details update
     */
    async updateCustomer(requestParameters: UpdateCustomerRequest): Promise<void> {
        await this.updateCustomerRaw(requestParameters);
    }

}
