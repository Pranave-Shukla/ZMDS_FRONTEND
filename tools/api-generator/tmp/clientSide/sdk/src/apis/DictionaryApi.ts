/* tslint:disable */
/* eslint-disable */
/**
 * ZMDS API documentation
 * API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DictionariesResponse,
    DictionariesResponseFromJSON,
    DictionariesResponseToJSON,
    Language,
    LanguageFromJSON,
    LanguageToJSON,
} from '../models';

export interface GetDictionariesRequest {
    language: Language;
}

/**
 * DictionaryApi - interface
 * 
 * @export
 * @interface DictionaryApiInterface
 */
export interface DictionaryApiInterface {
    /**
     * 
     * @summary Dictionary list
     * @param {Language} language 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DictionaryApiInterface
     */
    getDictionariesRaw(requestParameters: GetDictionariesRequest): Promise<runtime.ApiResponse<DictionariesResponse>>;

    /**
     * Dictionary list
     */
    getDictionaries(requestParameters: GetDictionariesRequest): Promise<DictionariesResponse>;

}

/**
 * 
 */
export class DictionaryApi extends runtime.BaseAPI implements DictionaryApiInterface {

    /**
     * Dictionary list
     */
    async getDictionariesRaw(requestParameters: GetDictionariesRequest): Promise<runtime.ApiResponse<DictionariesResponse>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling getDictionaries.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/dictionaries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DictionariesResponseFromJSON(jsonValue));
    }

    /**
     * Dictionary list
     */
    async getDictionaries(requestParameters: GetDictionariesRequest): Promise<DictionariesResponse> {
        const response = await this.getDictionariesRaw(requestParameters);
        return await response.value();
    }

}
