/* tslint:disable */
/* eslint-disable */
/**
 * ZMDS API documentation
 * API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerLookupResponse,
    CustomerLookupResponseFromJSON,
    CustomerLookupResponseToJSON,
} from '../models';

export interface GetCustomerLookupRequest {
    id: string;
}

/**
 * CustomerLookupApi - interface
 * 
 * @export
 * @interface CustomerLookupApiInterface
 */
export interface CustomerLookupApiInterface {
    /**
     * 
     * @summary Customer lookup
     * @param {string} id Customer ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerLookupApiInterface
     */
    getCustomerLookupRaw(requestParameters: GetCustomerLookupRequest): Promise<runtime.ApiResponse<CustomerLookupResponse>>;

    /**
     * Customer lookup
     */
    getCustomerLookup(requestParameters: GetCustomerLookupRequest): Promise<CustomerLookupResponse>;

}

/**
 * 
 */
export class CustomerLookupApi extends runtime.BaseAPI implements CustomerLookupApiInterface {

    /**
     * Customer lookup
     */
    async getCustomerLookupRaw(requestParameters: GetCustomerLookupRequest): Promise<runtime.ApiResponse<CustomerLookupResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomerLookup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/customer-lookups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerLookupResponseFromJSON(jsonValue));
    }

    /**
     * Customer lookup
     */
    async getCustomerLookup(requestParameters: GetCustomerLookupRequest): Promise<CustomerLookupResponse> {
        const response = await this.getCustomerLookupRaw(requestParameters);
        return await response.value();
    }

}
