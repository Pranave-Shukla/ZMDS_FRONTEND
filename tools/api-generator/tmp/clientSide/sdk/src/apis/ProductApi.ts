/* tslint:disable */
/* eslint-disable */
/**
 * ZMDS API documentation
 * API documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProductDetailsResponse,
    ProductDetailsResponseFromJSON,
    ProductDetailsResponseToJSON,
    ProductPartialRequest,
    ProductPartialRequestFromJSON,
    ProductPartialRequestToJSON,
    ProductsRequest,
    ProductsRequestFromJSON,
    ProductsRequestToJSON,
    ProductsResponse,
    ProductsResponseFromJSON,
    ProductsResponseToJSON,
} from '../models';

export interface GetProductDetailsRequest {
    id: string;
    statusId: string;
}

export interface GetProductsRequest {
    productsRequest: ProductsRequest;
}

export interface UpdateProductRequest {
    id: string;
    statusId: string;
    productPartialRequest: ProductPartialRequest;
    applyForAllSystems?: boolean;
}

/**
 * ProductApi - interface
 * 
 * @export
 * @interface ProductApiInterface
 */
export interface ProductApiInterface {
    /**
     * 
     * @summary Product details
     * @param {string} id product ID
     * @param {string} statusId product status ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    getProductDetailsRaw(requestParameters: GetProductDetailsRequest): Promise<runtime.ApiResponse<ProductDetailsResponse>>;

    /**
     * Product details
     */
    getProductDetails(requestParameters: GetProductDetailsRequest): Promise<ProductDetailsResponse>;

    /**
     * 
     * @summary Products list
     * @param {ProductsRequest} productsRequest Get products request parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    getProductsRaw(requestParameters: GetProductsRequest): Promise<runtime.ApiResponse<ProductsResponse>>;

    /**
     * Products list
     */
    getProducts(requestParameters: GetProductsRequest): Promise<ProductsResponse>;

    /**
     * 
     * @summary Product details update
     * @param {string} id Customer ID
     * @param {string} statusId Product status context
     * @param {ProductPartialRequest} productPartialRequest Updated product
     * @param {boolean} [applyForAllSystems] Tells if apply changes to all systems in product context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiInterface
     */
    updateProductRaw(requestParameters: UpdateProductRequest): Promise<runtime.ApiResponse<void>>;

    /**
     * Product details update
     */
    updateProduct(requestParameters: UpdateProductRequest): Promise<void>;

}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI implements ProductApiInterface {

    /**
     * Product details
     */
    async getProductDetailsRaw(requestParameters: GetProductDetailsRequest): Promise<runtime.ApiResponse<ProductDetailsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProductDetails.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling getProductDetails.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.statusId !== undefined) {
            queryParameters['statusId'] = requestParameters.statusId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Product details
     */
    async getProductDetails(requestParameters: GetProductDetailsRequest): Promise<ProductDetailsResponse> {
        const response = await this.getProductDetailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Products list
     */
    async getProductsRaw(requestParameters: GetProductsRequest): Promise<runtime.ApiResponse<ProductsResponse>> {
        if (requestParameters.productsRequest === null || requestParameters.productsRequest === undefined) {
            throw new runtime.RequiredError('productsRequest','Required parameter requestParameters.productsRequest was null or undefined when calling getProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductsRequestToJSON(requestParameters.productsRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsResponseFromJSON(jsonValue));
    }

    /**
     * Products list
     */
    async getProducts(requestParameters: GetProductsRequest): Promise<ProductsResponse> {
        const response = await this.getProductsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Product details update
     */
    async updateProductRaw(requestParameters: UpdateProductRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProduct.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling updateProduct.');
        }

        if (requestParameters.productPartialRequest === null || requestParameters.productPartialRequest === undefined) {
            throw new runtime.RequiredError('productPartialRequest','Required parameter requestParameters.productPartialRequest was null or undefined when calling updateProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.statusId !== undefined) {
            queryParameters['statusId'] = requestParameters.statusId;
        }

        if (requestParameters.applyForAllSystems !== undefined) {
            queryParameters['applyForAllSystems'] = requestParameters.applyForAllSystems;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductPartialRequestToJSON(requestParameters.productPartialRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Product details update
     */
    async updateProduct(requestParameters: UpdateProductRequest): Promise<void> {
        await this.updateProductRaw(requestParameters);
    }

}
